<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Mapper">

	<!-- BOARD DTO -->
	<!-- oracle db 게시물 목록
	<select id="List" resultType="com.test.dto.DbDTO" parameterType="com.test.util.Search">		
		SELECT * 		
		FROM (	
       		SELECT A.*, ROWNUM AS RNUM, COUNT(*) OVER() AS TOTCNT
  			FROM( SELECT * FROM han ORDER BY dno desc) A
  			<include refid="search"/> 
  			) B 
  		<![CDATA[
		WHERE RNUM > #{start_index} AND RNUM <= #{wow}
		]]>
	</select>	
	-->
	
	
	<!-- 마리아 db 게시물 목록 [전체]  -->
	<select id="List" resultType="com.test.dto.DbDTO" parameterType="com.test.util.Search">		
		SELECT * 		
		FROM (	SELECT *  FROM han_board 
				<include refid="search"/> ) B 
  		<![CDATA[
  		ORDER BY dno desc
  		LIMIT #{start_index}, #{per_page_post}
		]]>
	</select>
	
	
	
	<!-- 마리아 db 게시물 목록 [카테고리별]  -->
	<select id="Board_List" resultType="com.test.dto.DbDTO" parameterType="com.test.util.Search">		
		SELECT * 		
		FROM (	SELECT *  FROM han_board 
				<include refid="search"/> ) B 
  		<![CDATA[
  		WHERE category =#{category}
  		ORDER BY dno desc
  		LIMIT #{start_index}, #{per_page_post}
		]]>
	</select>	
	
			
	<!-- oracle db 글 생성
	<insert id="insert" useGeneratedKeys="true" keyProperty="dno">
		<selectKey keyProperty="dno" resultType="int" order="BEFORE">
			select han_sequence.nextval from dual
		</selectKey>
		insert into han (dno, title, content, writer, regdate, imageyn ) 
		values ( han_sequence.currval, #{title}, #{content, jdbcType=VARCHAR}, #{writer}, TO_CHAR(now(),'YYYY/MM/DD'), #{imageyn} )
	</insert>
	-->
	
	
	<!-- 마리아 db 글 생성 -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="dno">
		insert into han_board ( title, content, writer, regdate, imageyn, thumbnail, category ) 
		values (  #{title}, #{content, jdbcType=VARCHAR}, #{writer}, DATE_FORMAT(CURRENT_TIMESTAMP, '%m.%d') ,#{imageyn}, #{thumbnail}, #{category} )
	</insert>
	
		
	<!-- 글 읽기 -->
	<select id="read" resultType="com.test.dto.DbDTO" parameterType="int">
		select * from han_board where dno = #{dno}
	</select>
	
	
	<!-- 글 삭제 -->
	<delete id="delete" parameterType="int">
		delete from han_board where dno = #{dno}
	</delete>
	
	
	<!-- 글 수정 -->
	<update id="modify" parameterType="com.test.dto.DbDTO">
		update han_board set title=#{title}, writer=#{writer}, content=#{content}, imageyn=#{imageyn}, thumbnail=#{thumbnail}, category=#{category}  where dno=#{dno}
	</update>
	
		
	<!-- 게시글의 총 갯수 [전체] -->
	<select id="getBoardListCnt" resultType="int" parameterType="com.test.util.Search">
		select count(*) from han_board <include refid="search"/>
	</select>
	
	
	<!-- 게시글의 총 갯수 [카테고리] -->
	<select id="getBoardListCnt2" resultType="int" parameterType="com.test.util.Search">
		select count(*)
		from ( select * from han_board where category =#{category} ) b
		<include refid="search"/>
	</select>
	
	
	<!-- 조회수 증가 -->
	<select id="viewcnt" resultType="com.test.dto.DbDTO" parameterType="int">
		update han_board set viewcnt = viewcnt + 1  where dno = #{dno}
	</select>
	
	
	<!-- 날자별 작성된 게시글  -->
	<select id="board_count_day" resultType="int" parameterType="String">
		select count(*) from han_board where regdate =#{regdate}
	</select>
	
	
	<!-- Oracle db 검색 
	<sql id="search">
  		<if test="searchType=='title' and keyword != null and keyword != '' ">where title like '%' || #{keyword} || '%'</if>
  		<if test="searchType=='content' and keyword != null and keyword != '' ">where content like '%' || #{keyword} || '%'</if>
  		<if test="searchType=='writer' and keyword != null and keyword != '' ">where writer like '%' || #{keyword} || '%'</if>
	</sql>
	-->
	
	
	<!-- 마리아 db 검색 -->
	<sql id="search">
  		<if test="searchType=='title' and keyword != null and keyword != '' ">where title like CONCAT('%',#{keyword},'%')</if>
  		<if test="searchType=='content' and keyword != null and keyword != '' ">where content like CONCAT('%',#{keyword},'%')</if>
  		<if test="searchType=='writer' and keyword != null and keyword != '' ">where writer like CONCAT('%',#{keyword},'%')</if>
  		<if test="searchType=='ID' and keyword != null and keyword != '' ">where ID like CONCAT('%',#{keyword},'%')</if>
	</sql>
	<!-- BOARD DTO -->
		
	
	<!-- UserDTO -->
	<!-- 회원가입	-->
	<insert id="register" parameterType="com.test.dto.UserDTO">
     	insert into han_user values(#{ID}, #{PASSWORD}, #{EMAIL})   
    </insert>
	  
	  
	<!-- 로그인 -->
	<select id="login" resultType="com.test.dto.UserDTO" parameterType="com.test.dto.UserDTO">
 		select *
 		from han_user
 		where ID = #{ID} and PASSWORD = #{PASSWORD}
	</select>
	
	
	<!-- EMAIL 중복체크 -->
	<select id="overLap_EMAIL" resultType="int" parameterType="String">
 		select count(EMAIL)
 		from han_user
 		where EMAIL = #{EMAIL}
	</select>
	
	
	<!-- ID 중복체크 -->
	<select id="overLap" resultType="int" parameterType="com.test.dto.UserDTO">
 		select count(ID)
 		from han_user
 		where ID = #{ID}
	</select>
	
	
	<!-- 유저 리스트  -->
	<select id="user_list" resultType="com.test.dto.UserDTO" parameterType="com.test.util.Search"> 
		SELECT ID, EMAIL 		
		FROM (	SELECT ID, EMAIL 
				FROM han_user 
				<include refid="search"/> ) B 
  		<![CDATA[
  		ORDER BY ID desc
  		LIMIT #{start_index}, #{per_page_post}
		]]>
	</select>
		
	<!-- 유저의 총 수 -->
	<select id="user_count" resultType="int" parameterType="com.test.util.Search">
		select count(*) from han_user <include refid="search"/>
	</select>
	
	<!-- 유저 삭제 -->
	<delete id="user_delete" parameterType="com.test.dto.UserDTO">
		delete from han_user where ID =#{ID}
	</delete>
	<!-- UserDTO -->
	



	<!-- oracle db에 파일에 대한 정보 업로드  
	<insert id="insertFile" parameterType="hashMap">
		insert into mp_file (
			file_no,
			dno,
			org_file_name,
			stored_file_name,
			file_size
		) values (
			seq_tb_file_idx.NEXTVAL,
			#{dno},
			#{org_file_name},
			#{stored_file_name},
			#{file_size}
		)
	</insert>
	-->
	
	
	
	
	<!-- File 관련 -->
	<!-- 마리아 db 에 파일에 대한 정보 업로드 -->
	<insert id="insertFile" parameterType="hashMap">
		insert into mp_file (
			dno,
			org_file_name,
			stored_file_name,
			file_size
		) values (			
			#{dno},
			#{org_file_name},
			#{stored_file_name},
			#{file_size}
		)
	</insert>
	
		
	<!-- 파일 리스트 조회 -->
	<select id="selectFileList" resultType="com.test.dto.FileDTO" parameterType="int">
	SELECT file_no,
		   org_file_name,
		   ROUND(FILE_SIZE/1024,1) AS file_size
	  FROM mp_file
	 WHERE dno = #{dno}
	</select>
	
	
	<!-- 파일 다운로드 -->
	<select id="selectFileInfo" resultType="com.test.dto.FileDTO" parameterType="com.test.dto.FileDTO" >
	SELECT stored_file_name,
			org_file_name
	FROM mp_file
	WHERE file_no = #{file_no}
	</select>
	
	
	<!-- 수정폼에서 db에 있는 파일에 대한 정보를 삭제 -->
	<delete id="modifyDelete" parameterType="int">
		delete from mp_file where file_no=#{file_no}
	</delete>
	
	
	<!-- 수정폼에서 저장공간에 있는 파일을 삭제하기 위해 저장된파일의 이름을 리턴 -->
	<select id="modifyDeleteServer" resultType="String" parameterType="int">
		select stored_file_name
		from mp_file
		where  file_no=#{file_no}
	</select>
	
	
	<!-- 글 삭제시 해당 글번호의 저장공간에 있는 파일을 삭제하기 위해 저장된파일의 이름을 리턴 -->
	<select id="deleteServer" resultType="String" parameterType="int">
		select stored_file_name
		from mp_file
		where dno=#{dno}
	</select>
	<!-- File 관련 -->
		
	
	<!-- 리플 관련 -->
	<!-- 리플 작성
	<insert id="writeReply">
	insert into board_reply( dno, rno, content, writer )
	values( #{dno}, board_reply_SEQ.NEXTVAL, #{content} , #{writer} )
	</insert>
	 -->
	 
	
	<!-- 마리아 db 리플 작성 [게시판] -->
	<insert id="writeReply" parameterType="com.test.dto.ReplyDTO">
		insert into board_reply( dno, content, writer, regdate)
		values( #{dno}, #{content} ,#{writer} ,DATE_FORMAT(CURRENT_TIMESTAMP, '%m.%d'))
	</insert>
	
	
	<!-- 마리아 db 리플 작성 [축구정보]-->
	<insert id="soccer_writeReply" parameterType="com.test.dto.Information_ReplyDTO">
		insert into information_reply( club_name, content, writer, regdate)
		values( #{club_name}, #{content} ,#{writer} ,DATE_FORMAT(CURRENT_TIMESTAMP, '%m.%d'))
	</insert>
	
		
	<!-- 리플 수정 [게시판] -->
	<update id="updateReply" parameterType="com.test.dto.ReplyDTO">
		update board_reply set content = #{content}
		where rno = #{rno}
	</update>
	
	
	<!-- 리플 수정 [축구정보]-->
	<update id="soccer_updateReply" parameterType="com.test.dto.Information_ReplyDTO">
		update information_reply set content = #{content}
		where rno = #{rno}
	</update>


	<!-- 리플 삭제 [게시판] -->
	<delete id="deleteReply" parameterType="com.test.dto.ReplyDTO">
		delete from board_reply
		where rno = #{rno}
	</delete>
	
	
	<!-- 리플 삭제 [축구정보] -->
	<delete id="soccer_deleteReply" parameterType="com.test.dto.Information_ReplyDTO">
		delete from information_reply
		where rno = #{rno}
	</delete>
		
		
	<!-- 리플 리스트 [게시판]  -->
	<select id="commentList" resultType="com.test.dto.ReplyDTO" parameterType="int">
        select *
        from board_reply
        where dno = #{dno}
    </select>
    
    
    <!-- 리플 리스트 [축구정보] -->
    <select id="soccer_commentList" resultType="com.test.dto.Information_ReplyDTO" parameterType="String">
        select *
        from information_reply
        where club_name = #{club_name}
    </select>
    
    
    <!-- 전체 리플 카운트 [게시판] -->
   	<select id="reply_allcnt" resultType="int">
   		select count(*)
   		from board_reply
   	</select> 
    
    
    <!-- 리플 카운트 [게시판] -->
    <select id="reply_cnt" resultType="int" parameterType="int">
    	select count(*)
    	from board_reply
    	where dno =#{dno}
    </select>
    
    
    <!-- 리플 카운트 [축구정보]-->
    <select id="soccer_reply_cnt" resultType="int" parameterType="String">
    	select count(*)
    	from information_reply
    	where club_name =#{club_name}
    </select>
    
    
    <!-- 리플 카운트한 결과를 저장 [게시판]-->
    <update id="reply_cnt_store" parameterType="com.test.dto.DbDTO">
    	update han_board set reply_cnt=#{reply_cnt} where dno=#{dno}
    </update>
    
    
    <!-- 리플 카운트한 결과를 저장 [축구정보] -->
    <update id="soccer_reply_cnt_store" parameterType="com.test.dto.ClubDTO">
    	update club set club_reply_cnt=#{club_reply_cnt} where club_name=#{club_name}
    </update>
    
    
    <!-- 날짜별 작성된 리플 [게시판] -->
    <select id="reply_count_day" resultType="int" parameterType="String">
    	select count(*) from board_reply where regdate =#{regdate}
    </select>
    <!-- 리플 관련 -->
    	
    	 	
    <!-- 작성중인 게시물의 첨부파일 존재 유무 [YES] -->
    <update id="file_yes" parameterType="int">
    	update han_board set fileyn = 'y' 
    	where dno = #{dno}
    </update>
    
    
    <!-- 작성중인 게시물의 첨부파일 존재 유무 [NO] -->
	<update id="file_no" parameterType="int">
    	update han_board set fileyn = 'n' 
    	where dno = #{dno}
    </update>
    
    
    <!-- 이미 작성된 게시물의 첨부파일 존재 유무 -->
    <select id="file_exist" resultType="int" parameterType="int">
    	select count(*)
    	from mp_file
    	where dno = #{dno}
    </select>
       
        
    <!-- ClubDTO -->
    <!-- 클럽 리스트 가져오기  -->
    <select id="Club_list" resultType="com.test.dto.ClubDTO">
    	select *
    	from club
    </select>   
    
    <!-- 클럽 별 정보 가져오기 -->
     <select id="Club_data" resultType="com.test.dto.ClubDTO" parameterType="String">
    	select *
    	from club
    	where club_search =#{name}
    </select> 
    
    <!-- 클럽 good 카운트 -->
    <insert id="good_cnt" parameterType="com.test.dto.ClubDTO">
    	update club set club_good = club_good + 1 where club_name=#{club_name}
    </insert>
    
     <!-- 클럽 bod 카운트-->
    <insert id="bad_cnt" parameterType="com.test.dto.ClubDTO">
    	update club set club_bad = club_bad + 1 where club_name=#{club_name}
    </insert>    
    <!-- ClubDTO --> 
    
    
    <!-- User_good_bad -->
	<!-- user_good -->
	<insert id="user_good" parameterType="com.test.dto.User_good_bad">
		insert into user_good_bad(user_good, club_name) 
		values( #{user_good}, #{club_name} )
	</insert>
	
	
	<!-- user_bad -->
	<insert id="user_bad" parameterType="com.test.dto.User_good_bad">
	insert into user_good_bad(user_bad, club_name) 
	values( #{user_bad}, #{club_name} )
	</insert>	
	
	
	<!-- user_good_check -->
	<select id="user_good_check" resultType="int" parameterType="com.test.dto.User_good_bad">
		select count(*) 
		from user_good_bad 
		where user_good=#{user_good} and club_name=#{club_name}
	</select>
	
	
	<!-- user_bad_check -->
	<select id="user_bad_check" resultType="int" parameterType="com.test.dto.User_good_bad">
		select count(*) 
		from user_good_bad 
		where user_bad=#{user_bad} and club_name=#{club_name}
	</select>
    <!-- User_good_bad -->
    
    
    
    
    
    <!-- VistiorDTO -->
    <!-- 방문자 체크 -->
    <insert id="visitor_count" parameterType="com.test.dto.VisitorDTO">
		insert into visitor ( visitor_regdate, visitor_ip  )
		values ( DATE_FORMAT(CURRENT_TIMESTAMP, '%m.%d'), #{visitor_ip}  )
	</insert>
	
	<!-- 날짜 가져오기 -->
	<select id="visitor_visitor_regdate" resultType="com.test.dto.VisitorDTO">
		select visitor_regdate from visitor
	</select>
	
	<!-- 날자별 방문자수 가져오기 [ip 중복처리 x] -->
	<select id="visitor_count_all" resultType="int" parameterType="String">
		select count(*) from visitor where visitor_regdate=#{visitor_regdate}
	</select>
		
	<!-- 날자별 방문자수 가져오기 [ip 중복처리 o] -->
	<select id="visitor_count_notall" resultType="int" parameterType="String">
		select count(distinct(visitor_ip)) from visitor where visitor_regdate=#{visitor_regdate}
	</select>
	<!-- VistiorDTO -->
	
	
	<!-- google login  -->
	<insert id="google_login" parameterType="String" >
		insert into aa
		values (#{email})
	</insert>
 
	
</mapper>